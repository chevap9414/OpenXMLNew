using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Spreadsheet;
using Models.Models;
using Service.IService;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;

namespace Service.ServiceExcel
{
    public class BaseExcel
    {
        public enum FullValidateFlag
        {
            Success,
            Warning,
            Error
        }

        public BaseExcel()
        {

        }

        protected string GetCellValue(WorkbookPart workbookPart, Sheet sheet, string addressName)
        {
            string value = null;

            WorksheetPart worksheetPart = (WorksheetPart)(workbookPart.GetPartById(sheet.Id));

            Cell theCell = worksheetPart.Worksheet.Descendants<Cell>().Where(c => c.CellReference == addressName).FirstOrDefault();
            if (theCell != null)
            {
                value = theCell.InnerText;
                if (theCell.DataType != null)
                {
                    switch (theCell.DataType.Value)
                    {
                        case CellValues.SharedString:
                            var stringSharedTable = workbookPart.GetPartsOfType<SharedStringTablePart>().FirstOrDefault();

                            if (stringSharedTable != null)
                            {
                                value = stringSharedTable.SharedStringTable.ElementAt(int.Parse(value)).InnerText;
                            }
                            break;
                        case CellValues.Boolean:
                            switch (value)
                            {
                                case "0":
                                    value = "FALSE";
                                    break;
                                case "1":
                                    value = "TRUE";
                                    break;
                            }
                            break;
                    }
                }
            }

            return value;
        }
        protected int GetColumnIndex(string reference)
        {
            int ci = 0;
            reference = reference.ToUpper();
            for (int ix = 0; ix < reference.Length && reference[ix] >= 'A'; ix++)
                ci = (ci * 26) + ((int)reference[ix] - 64);
            return ci;
        }
        protected string GetColumnName(string cellName)
        {
            Regex regex = new Regex("[A-Za-z]+");
            Match match = regex.Match(cellName);
            return match.Value;
        }
        protected string GetEndColumnMergeCell(WorkbookPart workbookPart, Sheet sheet, string addressStart)
        {
            string mergecellPosition = string.Empty;
            WorksheetPart worksheetPart = (WorksheetPart)(workbookPart.GetPartById(sheet.Id));
            if (worksheetPart.Worksheet.Elements<MergeCells>().Count() > 0)
            {
                MergeCells mergeCells = worksheetPart.Worksheet.Elements<MergeCells>().First();
                foreach (MergeCell mergeCell in mergeCells.Descendants<MergeCell>())
                {
                    string[] cellMerge = mergeCell.Reference.Value.Split(':');
                    if (cellMerge[0] == addressStart)
                    {
                        mergecellPosition = cellMerge[1];
                    }
                }
            }
            return mergecellPosition;
        }
        // waiting
        protected string GetRowValue(ModelTypeTempRowModel row)
        {
            List<string> LsEngine = new List<string>();
            foreach (var col in row.ModelTypeTempEngineModels)
            {
                foreach (var propName in GetPropertiesName(col))
                {
                    if (!propName.ToLower().Contains("id")) LsEngine.Add(GetPropValue(col, propName).ToString());
                }
            }
            List<string> LsEquip = new List<string>();
            foreach (var col in row.ModelTypeTempEquipmentModels)
            {
                foreach (var propName in GetPropertiesName(col))
                {
                    if (propName.ToLower().Contains("value")) LsEquip.Add(GetPropValue(col, propName).ToString());
                }
            }
            List<string> LsType = new List<string>();
            foreach (var col in row.ModelTypeTempTypeModels)
            {
                foreach (var propName in GetPropertiesName(col))
                {
                    if (propName.ToLower().Contains("code")) LsType.Add(GetPropValue(col, propName).ToString());
                }
            }
            string joinEn = string.Join("", LsEngine.ToArray());
            string joinEq = string.Join("", LsEquip.ToArray());
            string joinTy = string.Join("", LsType.ToArray());
            return (joinEn + joinEq + joinTy).Trim();
        }
        protected object GetPropValue(object src, string propName)
        {
            return src.GetType().GetProperty(propName).GetValue(src, null);
        }
        protected List<string> GetPropertiesName(object pObject)
        {
            List<string> propNames = new List<string>();
            if (pObject != null)
            {
                foreach (var prop in pObject.GetType().GetProperties())
                {

                    propNames.Add(prop.Name);
                }
            }

            return propNames;
        }
    }
}
